apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "tun.proxy"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 100250
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -fvisibility=hidden "
                abiFilters 'armeabi-v7a','arm64-v8a', 'x86'
                arguments "-DCMAKE_VERBOSE_MAKEFILE=1 -DANDROID_FUNCTION_LEVEL_LINKING=ON"

                // Tests are enabled by default.
                // To disable tests add line "enable_cpp_tests=false" into the file "local.properties".
                arguments "-DENABLE_CPP_TESTS=" + get_enable_cpp_tests().toString()

                // Use location of Android Sdk from "local.properties".
                // This is required to find path to "adb" tool.
                arguments "-DANDROID_SDK_ROOT=" + get_android_sdk_root().toString()
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
        }
        release {
            // @See gradle.properties
            storeFile file(productKeyStore)
            keyAlias productKeyAlias
            storePassword productKeyStorePassword
            keyPassword productKeyAliasPassword
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        abortOnError false
    }
    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }

    ndkVersion = '21.0.6113669'

    applicationVariants.all { variant ->
        if (variant.buildType.name.equals("release")) {
            variant.outputs.all {
                if (outputFileName != null && outputFileName.endsWith('.apk')) {
                    def versionName = defaultConfig.versionName
                    outputFileName = "${APP_NAME}_v${versionName}.apk"
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.0.0'
    implementation 'androidx.navigation:navigation-ui:2.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def get_enable_cpp_tests() {
    return get_properties().getProperty('enable_cpp_tests', 'true').toBoolean()
}

def get_android_sdk_root() {
    return get_properties().getProperty('sdk.dir', '').toString()
}

def get_properties() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + '/local.properties').newDataInputStream())
    return properties
}